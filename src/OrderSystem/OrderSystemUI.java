/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OrderSystem;

import java.awt.event.ActionEvent;
import java.util.*;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * @author Kwabena Appiah Peprah
 */
public class OrderSystemUI extends javax.swing.JFrame {

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Creates new form OrderSystemUI
     */
    public OrderSystemUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coloursButtonGroup = new javax.swing.ButtonGroup();
        quoteButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        pipesRUs = new javax.swing.JLabel();
        totalCostLabel = new javax.swing.JLabel();
        pipeDetailsPanel = new javax.swing.JPanel();
        pipeDetailsLabel = new javax.swing.JLabel();
        additionalFeaturesPanel = new javax.swing.JPanel();
        reinforcementCheckBox = new javax.swing.JCheckBox();
        chemresistCheckBox = new javax.swing.JCheckBox();
        insulationCheckBox = new javax.swing.JCheckBox();
        coloursPanel = new javax.swing.JPanel();
        noColourRadioButton = new javax.swing.JRadioButton();
        oneColourRadioButton = new javax.swing.JRadioButton();
        twoColourRadioButton = new javax.swing.JRadioButton();
        coreFeaturesPanel = new javax.swing.JPanel();
        lengthLabel = new javax.swing.JLabel();
        lengthTextField = new javax.swing.JTextField();
        diameterLabel = new javax.swing.JLabel();
        diameterTextField = new javax.swing.JTextField();
        amountLabel = new javax.swing.JLabel();
        amountTextField = new javax.swing.JTextField();
        gradeLabel = new javax.swing.JLabel();
        gradeSelecter = new javax.swing.JComboBox();
        customerNamePanel = new javax.swing.JPanel();
        customerNameTextField = new javax.swing.JTextField();
        basketPanel = new javax.swing.JPanel();
        pipeScrollPane = new javax.swing.JScrollPane();
        pipeList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        orderSummaryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderSummaryTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        quoteButton.setText("Get Order");
        quoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quoteButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        pipesRUs.setText("Pipe's R US - Order System");

        totalCostLabel.setText("Total cost of Order: ");

        pipeDetailsPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createEtchedBorder(), "Pipe Details"));

    javax.swing.GroupLayout pipeDetailsPanelLayout = new javax.swing.GroupLayout(pipeDetailsPanel);
    pipeDetailsPanel.setLayout(pipeDetailsPanelLayout);
    pipeDetailsPanelLayout.setHorizontalGroup(
        pipeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pipeDetailsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pipeDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .addContainerGap())
    );
    pipeDetailsPanelLayout.setVerticalGroup(
        pipeDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pipeDetailsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pipeDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
            .addContainerGap())
    );

    additionalFeaturesPanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Additional Features"));

reinforcementCheckBox.setText("Outer Reinforcement");

chemresistCheckBox.setText("Chemical Resistance");

insulationCheckBox.setText("Inner Insulation");

javax.swing.GroupLayout additionalFeaturesPanelLayout = new javax.swing.GroupLayout(additionalFeaturesPanel);
additionalFeaturesPanel.setLayout(additionalFeaturesPanelLayout);
additionalFeaturesPanelLayout.setHorizontalGroup(
    additionalFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(additionalFeaturesPanelLayout.createSequentialGroup()
        .addGap(28, 28, 28)
        .addComponent(chemresistCheckBox)
        .addGap(29, 29, 29)
        .addComponent(reinforcementCheckBox)
        .addGap(49, 49, 49)
        .addComponent(insulationCheckBox)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    additionalFeaturesPanelLayout.setVerticalGroup(
        additionalFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, additionalFeaturesPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(additionalFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(reinforcementCheckBox)
                .addComponent(chemresistCheckBox)
                .addComponent(insulationCheckBox))
            .addContainerGap())
    );

    coloursPanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Colours"));

coloursButtonGroup.add(noColourRadioButton);
noColourRadioButton.setSelected(true);
noColourRadioButton.setText("No colours");
noColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        noColourRadioButtonActionPerformed(evt);
    }
    });

    coloursButtonGroup.add(oneColourRadioButton);
    oneColourRadioButton.setText("1 colour");
    oneColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            oneColourRadioButtonActionPerformed(evt);
        }
    });

    coloursButtonGroup.add(twoColourRadioButton);
    twoColourRadioButton.setText("2 colours");
    twoColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            twoColourRadioButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout coloursPanelLayout = new javax.swing.GroupLayout(coloursPanel);
    coloursPanel.setLayout(coloursPanelLayout);
    coloursPanelLayout.setHorizontalGroup(
        coloursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(coloursPanelLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addComponent(noColourRadioButton)
            .addGap(83, 83, 83)
            .addComponent(oneColourRadioButton)
            .addGap(108, 108, 108)
            .addComponent(twoColourRadioButton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    coloursPanelLayout.setVerticalGroup(
        coloursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coloursPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(coloursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(noColourRadioButton)
                .addComponent(oneColourRadioButton)
                .addComponent(twoColourRadioButton))
            .addContainerGap())
    );

    coreFeaturesPanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Core Features"));

lengthLabel.setText("Length (up to 6 metres)");

lengthTextField.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        lengthTextFieldActionPerformed(evt);
    }
    });

    diameterLabel.setText("Diameter (in inches)");

    diameterTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            diameterTextFieldActionPerformed(evt);
        }
    });

    amountLabel.setText("Amount");

    amountTextField.setText("1");

    gradeLabel.setText("Grade of Plastic");

    gradeSelecter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
    gradeSelecter.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            gradeSelecterActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout coreFeaturesPanelLayout = new javax.swing.GroupLayout(coreFeaturesPanel);
    coreFeaturesPanel.setLayout(coreFeaturesPanelLayout);
    coreFeaturesPanelLayout.setHorizontalGroup(
        coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(coreFeaturesPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(amountLabel)
                .addComponent(lengthLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lengthTextField)
                .addComponent(amountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(diameterLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(gradeLabel, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(gradeSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    coreFeaturesPanelLayout.setVerticalGroup(
        coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(coreFeaturesPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lengthLabel)
                .addComponent(lengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(diameterLabel)
                .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
            .addGroup(coreFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(amountLabel)
                .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(gradeLabel)
                .addComponent(gradeSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    customerNamePanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Customer's Name"));

customerNameTextField.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        customerNameTextFieldActionPerformed(evt);
    }
    });

    javax.swing.GroupLayout customerNamePanelLayout = new javax.swing.GroupLayout(customerNamePanel);
    customerNamePanel.setLayout(customerNamePanelLayout);
    customerNamePanelLayout.setHorizontalGroup(
        customerNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(customerNamePanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(customerNameTextField)
            .addContainerGap())
    );
    customerNamePanelLayout.setVerticalGroup(
        customerNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerNamePanelLayout.createSequentialGroup()
            .addContainerGap(16, Short.MAX_VALUE)
            .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    basketPanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Basket"));

pipeList.setModel(new javax.swing.AbstractListModel() {
    String[] strings = { };
    public int getSize() { return strings.length; }
    public Object getElementAt(int i) { return strings[i]; }
    });
    pipeList.addListSelectionListener(sl);
    pipeScrollPane.setViewportView(pipeList);

    addButton.setText("Add");
    addButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButtonActionPerformed(evt);
        }
    });

    removeButton.setText("Remove");
    removeButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeButtonActionPerformed(evt);
        }
    });

    clearButton.setText("Clear");
    clearButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout basketPanelLayout = new javax.swing.GroupLayout(basketPanel);
    basketPanel.setLayout(basketPanelLayout);
    basketPanelLayout.setHorizontalGroup(
        basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(basketPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(pipeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGroup(basketPanelLayout.createSequentialGroup()
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    basketPanelLayout.setVerticalGroup(
        basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basketPanelLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(basketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addButton)
                .addComponent(removeButton)
                .addComponent(clearButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pipeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    orderSummaryPanel.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "Order Summary"));

orderSummaryTextArea.setEditable(false);
orderSummaryTextArea.setColumns(20);
orderSummaryTextArea.setRows(5);
jScrollPane1.setViewportView(orderSummaryTextArea);

javax.swing.GroupLayout orderSummaryPanelLayout = new javax.swing.GroupLayout(orderSummaryPanel);
orderSummaryPanel.setLayout(orderSummaryPanelLayout);
orderSummaryPanelLayout.setHorizontalGroup(
    orderSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    .addGroup(orderSummaryPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        .addContainerGap())
    );
    orderSummaryPanelLayout.setVerticalGroup(
        orderSummaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(orderSummaryPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(coloursPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(additionalFeaturesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coreFeaturesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(quoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(basketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(27, 27, 27)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(totalCostLabel)
                        .addComponent(pipeDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(44, 44, 44)
            .addComponent(orderSummaryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(38, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pipesRUs, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(325, 325, 325))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(47, 47, 47)
            .addComponent(pipesRUs, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(customerNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(coreFeaturesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(additionalFeaturesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(coloursPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(23, 23, 23)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(basketPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pipeDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(orderSummaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(quoteButton)
                .addComponent(exitButton)
                .addComponent(totalCostLabel))
            .addContainerGap(20, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    JFrame errorFrame = new JFrame("");
    ArrayList<Pipe> pipes = new ArrayList<>();
    static String[] errorEntries = {"Length", "Diameter", "Amount"};
    boolean[] valid = {false, false, false};
    int noOfColours = 0;

    DefaultListModel dlm = new DefaultListModel();
    ListSelectionListener sl = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (pipes.size() > 0 && !e.getValueIsAdjusting()) {
                int selected = pipeList.getSelectedIndex();
                if (pipeList.isSelectionEmpty() || pipes.isEmpty()) {
                    pipeDetailsLabel.setText("<html>Length: "
                            + "<br>Diameter: "
                            + "<br>Grade: "
                            + "<br>Inner Insulation: "
                            + "<br>Outer Reinforcement: "
                            + "<br>Chemical Resistance: "
                            + "<br>Price: "
                            + "</html>");
                } else {
                    Pipe pipeSelected = pipes.get(selected);
                    pipeDetailsLabel.setText("<html>Length: " + pipeSelected.getLength()
                            + "<br>Diameter: " + (pipeSelected.getRadius() * 2)
                            + "<br>Grade: " + pipeSelected.getGrade()
                            + "<br>Inner Insulation: " + YesOrNo(pipeSelected.hasInsulation())
                            + "<br>Outer Reinforcement: " + YesOrNo(pipeSelected.isReinforced())
                            + "<br>Chemical Resistance: " + YesOrNo(pipeSelected.hasChemResist())
                            + "<br>Price: " + +pipeSelected.getCost()
                            + "</html>");
                }
                totalCostLabel.setText("Total cost of Order: £" + totalCost());
            }
        }
    };

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selected = pipeList.getSelectedIndex();
        if (selected >= 0) { // Remove only if a particular item is selected
            pipeList.removeListSelectionListener(sl);
            dlm.removeElementAt(selected);
            pipes.remove(selected);
            pipeList.addListSelectionListener(sl);
        } else if (pipeList.isSelectionEmpty() && pipes.size() > 0) {
            JOptionPane.showMessageDialog(errorFrame,
                    "There are no pipes selected to remove",
                    "Item Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(errorFrame,
                    "There are no pipes listed to remove",
                    "Item Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        totalCostLabel.setText("Total cost of Order: £" + totalCost());
    }//GEN-LAST:event_removeButtonActionPerformed

    private void lengthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthTextFieldActionPerformed

    }//GEN-LAST:event_lengthTextFieldActionPerformed

    private void gradeSelecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeSelecterActionPerformed

    }//GEN-LAST:event_gradeSelecterActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Resetting any previous information
        ArrayList<String> errors = new ArrayList<>();

        // Gathering the input from the input fields
        String lenAsString = lengthTextField.getText(); // length of pipe as a string
        String diaAsString = diameterTextField.getText(); // diameter of pipe as a string
        String amountAsString = amountTextField.getText(); // amount of pipe as a string
        int grade = gradeSelecter.getSelectedIndex() + 1;
        boolean inSu = insulationCheckBox.isSelected();
        boolean reIn = reinforcementCheckBox.isSelected();
        boolean chemRes = chemresistCheckBox.isSelected();

        // ---------------------------------------------------------------
        // Collecting and processing the numbers inputted
        
        // Length
        if (isNumeric(lenAsString)) {
            if (Double.parseDouble(lenAsString) > 6 || Double.parseDouble(lenAsString) < 0) {
                valid[0] = false;
            } else {
                valid[0] = true;
            }
        }

        // Diameter
        if (isNumeric(diaAsString)) {
            if (Double.parseDouble(diaAsString) > 0) {
                valid[1] = true;
            } else {
                valid[1] = false;
            }
        }

        // Amount
        if (isNumeric(amountAsString)) {
            if (Double.parseDouble(amountAsString) > 0) {
                valid[2] = true;
            } else {
                valid[2] = false;
            }
        }
        
        // pass - true if all the validity checks are true
        boolean pass = true;
        
        // Checking the validity of the data input
        for (int i = 0; i < 3; i++) {
            boolean temp = valid[i];
            if (temp == false) {
                //System.out.println("false at" + i);
                pass = false;
                errors.add(errorEntries[i]);
            }
        }

        // ---------------------------------------------------------------
        // Tries to add a pipe to the basket based on input
        if (pass == false) {
            final StringBuilder message = new StringBuilder();
            message.append("There is a problem with: \n");
            for (int i = 0; i < errors.size(); i++) {
                message.append("\n" + errors.get(i));
                if (errors.get(i).equals("Length")) {
                    message.append(errorMessage("Length", lenAsString));
                } else if (errors.get(i).equals("Diameter")) {
                    message.append(errorMessage("Diameter", diaAsString));
                } else if (errors.get(i).equals("Amount")) {
                    message.append(errorMessage("Amount", amountAsString));
                } else {
                    message.append(errorMessage("None", "None"));
                }
                
                // for the end of a line
                if (i == errors.size() - 1) {
                    message.append(".");
                } else {
                    message.append(", ");
                }

            }
            JOptionPane.showMessageDialog(errorFrame,
                    message.toString(),
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            for (int i = 0; i < Double.parseDouble(amountAsString); i++) {
                // Handles the labelling of a pipe for the lsit
                String tempName = labelPipe();

                double l = Double.parseDouble(lenAsString);
                double d = Double.parseDouble(diaAsString);

                // Type V
                if (grade >= 3 && inSu == true && reIn == true
                        && noOfColours >= 0) {
                    TypeV newPipe = new TypeV(l, d, grade, inSu, reIn, chemRes);
                    newPipe.setLabel(tempName);
                    pipes.add(newPipe);
                    dlm.addElement(newPipe.getLabel());
                } // Type IV
                else if (grade >= 2 && inSu == true && reIn == false
                        && noOfColours >= 0) {
                    TypeIV newPipe = new TypeIV(l, d, grade, inSu, reIn, chemRes);
                    newPipe.setLabel(tempName);
                    pipes.add(newPipe);
                    dlm.addElement(newPipe.getLabel());
                } // Type III
                else if (grade >= 2 && inSu == false && reIn == false
                        && noOfColours >= 0) {
                    TypeIII newPipe = new TypeIII(l, d, grade, inSu, reIn, chemRes);
                    newPipe.setLabel(tempName);
                    pipes.add(newPipe);
                    dlm.addElement(newPipe.getLabel());
                } // Type II
                else if (4 >= grade && grade >= 2 && inSu == false && reIn == false
                        && noOfColours <= 1) {
                    TypeII newPipe = new TypeII(l, d, grade, inSu, reIn, chemRes);
                    newPipe.setLabel(tempName);
                    pipes.add(newPipe);
                    dlm.addElement(newPipe.getLabel());
                } // Type I
                else if (grade <= 3 && inSu == false && reIn == false
                        && noOfColours == 0) {
                    TypeI newPipe = new TypeI(l, d, grade, inSu, reIn, chemRes);
                    newPipe.setLabel(tempName);
                    pipes.add(newPipe);
                    dlm.addElement(newPipe.getLabel());
                } else {
                    JOptionPane.showMessageDialog(errorFrame,
                            "Sorry, we don't stock these pipes",
                            "Item Error",
                            JOptionPane.ERROR_MESSAGE);
                    break;
                }
                pipeList.setModel(dlm);
            }
            totalCostLabel.setText("Total cost of Order: £" + totalCost());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void diameterTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diameterTextFieldActionPerformed

    }//GEN-LAST:event_diameterTextFieldActionPerformed

    private void quoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quoteButtonActionPerformed
        if (customerNameTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(errorFrame,
                    "There is no name given for the order",
                    "Order Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (pipes.size() > 20) {
            JOptionPane.showMessageDialog(errorFrame,
                    "There are too many pipes for this order"+
                    "\nThe maximum amount for an order is 20",
                    "Order Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (pipes.size() > 0 && !(customerNameTextField.getText().isEmpty())) {
            StringBuilder order = new StringBuilder();
            order.append("===============ORDER================");
            order.append("\n Customer Name: " + customerNameTextField.getText());
            order.append("\n====================================");
            for (int i = 0; i < pipes.size(); i++) {
                Pipe currPipe = pipes.get(i);
                order.append("\n============" + currPipe.getLabel() + "============"
                        + "\nLength: " + currPipe.getLength()
                        + "\nDiameter: " + (currPipe.getRadius() * 2)
                        + "\nGrade: " + currPipe.getGrade()
                        + "\nInner Insulation: " + YesOrNo(currPipe.hasInsulation())
                        + "\nOuter Reinforcement: " + YesOrNo(currPipe.isReinforced())
                        + "\nChemical Resistance: " + YesOrNo(currPipe.hasChemResist())
                        + "\nPrice: " + currPipe.getCost()
                        + "\n====================================\n"
                );
            }
            order.append("\n\nTotal Cost: £" + totalCost());
            orderSummaryTextArea.setText(order.toString());
        } else {
            JOptionPane.showMessageDialog(errorFrame,
                    "There are no pipes listed to make an order",
                    "Order Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_quoteButtonActionPerformed

    private void customerNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameTextFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        if (pipes.size() > 0) {
            dlm.removeAllElements();
            pipes.clear();
        } else {
            JOptionPane.showMessageDialog(errorFrame,
                    "There are no pipes listed to remove",
                    "Item Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        totalCostLabel.setText("Total cost of Order: £" + totalCost());
    }//GEN-LAST:event_clearButtonActionPerformed

    private void twoColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoColourRadioButtonActionPerformed
        noOfColours = 2;
    }//GEN-LAST:event_twoColourRadioButtonActionPerformed

    private void oneColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneColourRadioButtonActionPerformed
        noOfColours = 1;
    }//GEN-LAST:event_oneColourRadioButtonActionPerformed

    private void noColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noColourRadioButtonActionPerformed
        noOfColours = 0;
    }//GEN-LAST:event_noColourRadioButtonActionPerformed

    /**
     * @param s string of a potential numeric value
     * @return return a boolean. "True" if its a number, anything else is false
     */
    private static boolean isNumeric(String s) {
        try {
            double d = Double.parseDouble(s);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /**
     * @param error string of the error
     * @param amount string of a potential numeric value corresponding to the error
     * @return the error message as a string value
     */
    private String errorMessage(String error, String amount) {
        String errorMsg;
        switch (error) {
            case "Length":
                if (!isNumeric(amount)) {
                    errorMsg = ": The length of a pipe has to be a number";
                } else if (Double.parseDouble(amount) > 6) {
                    errorMsg = ": The length is too long for us to make";
                } else if (Double.parseDouble(amount) < 0) {
                    errorMsg = ": We can't make orders with negative numbers";
                } else {
                    errorMsg = ": There is an invalid character used";
                }
                break;

            case "Diameter":
                if (!isNumeric(amount)) {
                    errorMsg = ": The diameter of a pipe has to be a number";
                } else if (Double.parseDouble(amount) <= 0) {
                    errorMsg = ": We can't make orders with zero or negative numbers";
                } else {
                    errorMsg = ": There is an invalid character used";
                }
                break;

            case "Amount":
                if (!isNumeric(amount)) {
                    errorMsg = ": The amount of pipes to be added "
                            + "has to be a number";
                } else if (Double.parseDouble(amount) <= 0) {
                    errorMsg = ": We can't make orders withzero or negative numbers";
                } else {
                    errorMsg = ": There is an invalid character used";
                }
                break;

            default:
                errorMsg = ": There is an invalid character used";
        }
        return errorMsg;

    }

    /**
     * @return returns a label for a pipe in this order
     */
    private String labelPipe() {
        int newNo = pipes.size() + 1;
        String tempLabel = "Pipe " + newNo;
        return tempLabel;
    }

    /**
     * @param a boolean (true or false)
     * @return return string "Yes" if True, else will return "No"
     */
    private String YesOrNo(boolean a) {
        if (a) {
            return "Yes";
        } else {
            return "No";
        }
    }

    /**
     * @return returns the total cost for the order
     */
    private double totalCost() {
        double totalCost = 0;
        if (pipes.size() > 0) {
            for (int i = 0; i < pipes.size(); i++) {
                Pipe currentPipe = pipes.get(i);
                totalCost = totalCost + currentPipe.getCost();
            }
        }
        return totalCost;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderSystemUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderSystemUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderSystemUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderSystemUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new OrderSystemUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel additionalFeaturesPanel;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JTextField amountTextField;
    private javax.swing.JPanel basketPanel;
    private javax.swing.JCheckBox chemresistCheckBox;
    private javax.swing.JButton clearButton;
    private javax.swing.ButtonGroup coloursButtonGroup;
    private javax.swing.JPanel coloursPanel;
    private javax.swing.JPanel coreFeaturesPanel;
    private javax.swing.JPanel customerNamePanel;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JTextField diameterTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel gradeLabel;
    private javax.swing.JComboBox gradeSelecter;
    private javax.swing.JCheckBox insulationCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JTextField lengthTextField;
    private javax.swing.JRadioButton noColourRadioButton;
    private javax.swing.JRadioButton oneColourRadioButton;
    private javax.swing.JPanel orderSummaryPanel;
    private javax.swing.JTextArea orderSummaryTextArea;
    private javax.swing.JLabel pipeDetailsLabel;
    private javax.swing.JPanel pipeDetailsPanel;
    private javax.swing.JList pipeList;
    private javax.swing.JScrollPane pipeScrollPane;
    private javax.swing.JLabel pipesRUs;
    private javax.swing.JButton quoteButton;
    private javax.swing.JCheckBox reinforcementCheckBox;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel totalCostLabel;
    private javax.swing.JRadioButton twoColourRadioButton;
    // End of variables declaration//GEN-END:variables
}
